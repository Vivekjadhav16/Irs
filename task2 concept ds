# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import CountVectorizer

# Load your movie dataset (replace 'movie_data.csv' with your dataset file)
data = pd.read_csv('movie_data.csv')

# Data Preprocessing
# Select relevant features (e.g., genre, director, actors) and the target variable (rating)
selected_features = ['Genre', 'Director', 'Actors']
target_variable = 'Rating'
data = data[selected_features + [target_variable]]

# Handling categorical features using Label Encoding
label_encoder = LabelEncoder()
for feature in selected_features:
    data[feature] = label_encoder.fit_transform(data[feature])

# Text features (e.g., Actors) can be transformed using CountVectorizer
vectorizer = CountVectorizer()
actors_vectorized = vectorizer.fit_transform(data['Actors'])

# Combine the transformed features into a single DataFrame
feature_matrix = pd.DataFrame(actors_vectorized.toarray(), columns=vectorizer.get_feature_names_out())
for feature in selected_features:
    feature_matrix[feature] = data[feature]

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(feature_matrix, data[target_variable], test_size=0.2, random_state=42)

# Model Building (Linear Regression)
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-squared (R2) Score: {r2}")

# Now you can use the trained model for movie rating predictions

# Example prediction
sample_data = {'Genre': ['Action'], 'Director': ['Director_X'], 'Actors': ['Actor_A Actor_B Actor_C']}
sample_data['Genre'] = label_encoder.transform(sample_data['Genre'])
sample_data['Director'] = label_encoder.transform(sample_data['Director'])
sample_actors_vectorized = vectorizer.transform(sample_data['Actors']).toarray()
sample_features = np.hstack((sample_actors_vectorized, sample_data['Genre'], sample_data['Director'])
predicted_rating = model.predict([sample_features])
print(f"Predicted Rating: {predicted_rating[0]}")
